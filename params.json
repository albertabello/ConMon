{"name":"Conmon","tagline":"ConMon is a command line utility that measures the traffic to and from an endpoint","body":"### Synopsis \r\nConMon is a command line utility that measures the traffic to and from an\r\nendpoint. ConMon passively monitors the IP packets and classifies them to measure the bit rate for each of the classifiers. It is based on the `Sniffer` example in `libpcap (tcpdump)`.\r\n\r\n### Current classifiers:\r\n* Total, TCP, UDP, local, external [done] \r\n* Each is further classified as combined, inbound, outbound and background [done]\r\n\r\n#### Extras (yet to be implemented)\r\n* IP: IPv4 and IPv6\r\n* Multimedia: RTP (for RTCWEB, MPRTP, RTSP, etc.)\r\n* HTTP(S): port 80 and 443\r\n* LEDBAT: e.g., Bittorrent\r\n\r\n### Compiling ConMon\r\nThe project comes with a basic Makefile and depends on the following libraries:\r\n* [libpcap](http://www.tcpdump.org/release/libpcap-1.2.1.tar.gz)\r\n* [libevent](https://github.com/downloads/libevent/libevent/libevent-2.0.19-stable.tar.gz)\r\n* [pthreads]\r\n\r\n### Running ConMon\r\nConMon requires root privileges to capture packets. Until [ConMon\r\nv0.2.1](https://github.com/vr000m/conmon/tree/v0.2.1) the captured packets\r\nare stored locally (in files at `logs/`) and therefore the \"user\" has full\r\ncontrol of their data. If we implement a backend service to capture the\r\nlogs, we will then add a method to obfuscate the user's IP addresses to\r\npreserve their privacy. ConMon\r\n[currently](https://github.com/vr000m/conmon/tree/v0.2.1) creates two files\r\nin `logs/`\r\n* Packet Logs: `pkt_list_$filter_$interface.txt` (e.g.: pkt_list_ip_en1.txt)\r\n* Time Logs: `time_list_$filter_$interface.txt` (e.g.: time_list_ip_en1.txt)\r\n\r\n```\r\n$./conmon --help\r\nUsage: conmon [interface] [filter]\r\n\r\nOptions:\r\n    interface     Listen on <interface> for packets.\r\n    filter        PCAP Filter to apply on packets.\r\n```\r\n\r\n\r\n* Running without any parameters sets default PCAP filter=\"ip\" and shows a menu to choose interfaces.\r\nFor example:\r\n\r\n```\r\n$ sudo ./conmon\r\nextended by Varun Singh / Copyright (c) 2005 The Tcpdump Group\r\nTHERE IS ABSOLUTELY NO WARRANTY FOR THIS PROGRAM.\r\n\r\n1. en0  (No Desc.)\t\r\n2. fw0\t(No Desc.)\t\r\n3. en1\t(No Desc.)\tIPv6: fe80::xx:xx:xx:xx%en1\tIPv4: xx.xx.xx.xx\t\r\n4. p2p0\t(No Desc.)\t\r\nEnter the interface number (1-4):\r\n```\r\n\r\n* If you do not want the choose the network interface then pass it as a command-line argument.\r\nFor example:\r\n\r\n```\r\n$ sudo ./conmon en1\r\nIP ADDR: xx.xx.xx.xx  MASK: 255.255.240.0\tDevice: en1\tFilter expression: ip\r\n```\r\n\r\n* You may use an alternate [PCAP filter](http://wiki.wireshark.org/CaptureFilters). \r\nFor example:\r\n\r\n```\r\n$ sudo ./conmon en1 tcp\r\nIP ADDR: xx.xx.xx.xx  MASK: 255.255.240.0  Device: en1\tFilter expression: tcp\r\n```\r\n\r\n### Output\r\nIn the `plots/` folder there is a script (`source plots.sh`) to generate\r\nthe plots based on the \"Time Logs\" (e.g.: time_list_ip_en1.txt). We use\r\n[Gnuplot](http://gnuplot.sourceforge.net/demo_cvs/) to generate the [PDF\r\nplots](http://www.gnuplot.info/docs_4.6/gnuplot.pdf) (See Pg. 174 for list\r\nof `terminal` options).\r\n\r\n`plots.sh` takes as command line argument the filename of the \"time logs\"\r\n(without the file extension). For example:\r\n\r\n```\r\n$./plots.sh time_list_ip_en1\r\n# will generate the following files\r\ntime_list_ip_en1_total.pdf\r\ntime_list_ip_en1_tcp.pdf\r\ntime_list_ip_en1_udp.pdf\r\ntime_list_ip_en1_local.pdf\r\ntime_list_ip_en1_external.pdf\r\n```\r\n\r\nEach graph is a\r\n`multiplot`(http://gnuplot.sourceforge.net/demo_cvs/multiplt.html) that\r\nshows the combined, incoming, outgoing and cross-traffic. An Example plot\r\nof the **UDP traffic** is shown below: \r\n![Example ConMon plot](http://www.netlab.tkk.fi/~varun/share_pub/time_list_udp-0.png)\r\n\r\n### TODO\r\n* create above classifiers [done]\r\n* create vectors/map of {num_pkts, bytes} for each of the above classifiers [done]\r\n* create plots to show changes in bit rate for the above classifiers [done]\r\n* If data is uploaded then hash the source/destination IP addresses. [not\r\n  needed currently, as data is stored locally!]\r\n* create an API so that applications can query the bit rate for a specific\r\n  classifier\r\n* convert or allow ConMon to run as a daemon\r\n* There may be bugs related to IPv6 in some places. ConMon is a fork from\r\n  my earlier project [Snapper](https://github.com/vr000m/Snapper)\r\n\r\n\r\n### Contribute/Extend\r\nIf you want to parse a packet look at got_packet() there is a switch case\r\nthat parses the protocol field. You can add your own code or function to\r\nparse the associated packet (see `ParseUDPPacket()`/`ParseTCPPacket()` in\r\n`conmon.c`).","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-239293-1"}